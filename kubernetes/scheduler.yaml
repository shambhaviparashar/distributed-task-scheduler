apiVersion: v1
kind: Service
metadata:
  name: scheduler
  namespace: task-scheduler
  labels:
    app: scheduler
spec:
  ports:
  - port: 9090
    name: metrics
    targetPort: 9090
  clusterIP: None
  selector:
    app: scheduler

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: scheduler
  namespace: task-scheduler
  labels:
    app: scheduler
spec:
  serviceName: scheduler
  replicas: 2  # Multiple replicas for high availability, only one will be active leader
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: scheduler
  template:
    metadata:
      labels:
        app: scheduler
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: scheduler
        image: ${REGISTRY_HOST}/task-scheduler/scheduler:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 9090
          name: metrics
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: task-scheduler-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: task-scheduler-config
              key: DB_PORT
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: task-scheduler-config
              key: DB_NAME
        - name: DB_SSLMODE
          valueFrom:
            configMapKeyRef:
              name: task-scheduler-config
              key: DB_SSLMODE
        - name: REDIS_ADDR
          valueFrom:
            configMapKeyRef:
              name: task-scheduler-config
              key: REDIS_ADDR
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: REDIS_PASSWORD
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: task-scheduler-config
              key: REDIS_DB
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: task-scheduler-config
              key: LOG_LEVEL
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - /app/health-check.sh
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - /app/health-check.sh
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c", "sleep 5"]  # Give time for leader election to occur 